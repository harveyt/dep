#!/bin/bash

TESTS=$PWD
ROOT=$PWD/..
DEP_PATH="$ROOT/dep.py"
DEP="$DEP_PATH -v"
TEST_NAME="$(basename $0)"
TMP_DIR=$TESTS/tmp/$TEST_NAME
TMP_WORK=$TMP_DIR/work
TMP_REPOS=$TMP_DIR/repos
DIFF_ARGS="-u --label Expected --label Actual"

test_title()
{
    echo
    echo "================================================================================"    
    echo "Running test \"$TEST_NAME\""
    echo "================================================================================"
    echo
}

test_echo()
{
    echo "### $@"
}

test_echo_script_location()
{
    local c=1
    while true
    do
	if [[ ${FUNCNAME[$c]} == "main" ]]; then
	    local file="${BASH_SOURCE[$c]}"
	    local line="${BASH_LINENO[$((c - 1))]}"
	    echo -n "$file:$line: "
	    break
	fi
	c=$((c + 1))
    done
}

test_fail()
{
    test_echo_script_location
    echo "TEST FAIL: $@"
    exit 1
}

test_exec()
{
    test_echo "Test execute \"$@\""
    "$@"
    status=$?
    if [[ $status -ne 0 ]]; then
	test_fail "returned non-zero status $status"
    fi
}

test_exec_fails()
{
    test_echo "Test execute which should fail \"$@\""
    "$@"
    status=$?
    if [[ $status -eq 0 ]]; then
	test_fail "returned zero status"
    fi
}

test_output_from_exec()
{
    local expected="$1"
    shift
    test_echo "Test execute \"$@\" and check output"
    "$@" > $TMP_DIR/output
    status=$?
    if [[ $status -ne 0 ]]; then
	test_fail "returned non-zero status $status"
    fi
    echo -n -e "$expected" | diff $DIFF_ARGS - $TMP_DIR/output
    status=$?
    if [[ $status -ne 0 ]]; then
	test_fail "execution did not output expected result"
    fi
}

test_file_exists()
{
    local file="$1"    
    test_echo "Test file exists \"$file\""
    if [[ ! -f "$file" ]]; then
	test_fail "file \"$file\" does not exist"
    fi
}

test_resource_missing()
{
    local path="$1"
    local type="$2"
    test_echo "Test $type missing \"$path\""
    if [[ -e "$path" ]]; then
	test_fail "$type \"$path\" exists"
    fi
}

test_file_missing()
{
    test_resource_missing "$1" "file"
}

test_file_contains()
{
    local file="$1"
    local expected="$2"
    test_file_exists "$file"
    test_echo "Test file \"$file\" contains expected result"
    echo -n -e "$expected" | diff $DIFF_ARGS - "$file"
    status=$?
    if [[ $status -ne 0 ]]; then
	test_fail "file \"$file\" does not contain expected result"
    fi
}

test_dir_exists()
{
    local dir="$1"    
    test_echo "Test dir exists \"$dir\""
    if [[ ! -d "$dir" ]]; then
	test_fail "dir \"$dir\" does not exist"
    fi
}

test_dir_missing()
{
    test_resource_missing "$1" "dir"
}

test_realpath()
{
    local path="$1"
    local dir=$(dirname "$path")
    local file=$(basename "$path")
    echo "$(cd "$dir"; pwd -P)/$file"
}
   
test_symlink_exists()
{
    local source="$1"
    local dest="$2"
    test_echo "Test symlink exists \"$source\" -> \"$dest\""
    if [[ ! -L $source ]]; then
	test_fail "symlink \"$source\" does not exist"
    fi
    actual_dest=$(readlink "$source")
    abs_source=$(test_realpath "$source")
    abs_dest=$(test_realpath "$dest")
    abs_actual_dest=$(test_realpath "$(dirname "$abs_source")/$actual_dest")
    test_echo "Actual symlink rel dest: \"$actual_dest\""
    test_echo "Actual symlink abs dest: \"$abs_actual_dest\""    
    test_echo "Expect symlink abs dest: \"$abs_dest\""
    if [[ "$abs_dest" != "$abs_actual_dest" ]]; then
	test_fail "symlink \"$source\" does not point at \"$dest\""
    fi
}

test_symlink_missing()
{
    test_resource_missing "$1" "symlink"
}

test_repo_path()
{
    echo "$TMP_REPOS/$1"
}

test_repo_url()
{
    local path=$(test_repo_path "$1")
    echo "file://$path.git"
}

test_repo_git_dir()
{
    local path=$(test_repo_path "$1")
    echo "$path.git"
}

test_get_git_branch()
{
    local git_dir=$1
    local branch=$(git --git-dir $git_dir rev-parse --symbolic-full-name HEAD)
    echo ${branch#refs/heads/}
}

test_repo_git_branch()
{
    test_get_git_branch $(test_repo_git_dir "$1")
}

test_get_git_commit()
{
    local git_dir=$1
    echo $(git --git-dir $git_dir rev-parse HEAD)
}

test_repo_git_commit()
{
    test_get_git_commit $(test_repo_git_dir "$1")
}

test_git_create_repo()
{
    local name="$1"
    test_echo "Create repository $name"
    local path=$(test_repo_path $name)
    local git_dir=$(test_repo_git_dir $name)
    local url=$(test_repo_url $name)
    test_exec git init --bare "$git_dir"
    test_exec git clone "$url" "$path"
    cd "$path"
    test_exec touch "FILE-$name"
    test_exec git add "FILE-$name"
    test_exec git commit -m "Initial commit on $name"
    test_exec git push
    cd -
}

test_git_status_equals()
{
    local expected="$1"
    test_echo "Test git status matches expected result"
    echo -n -e "$expected" | diff $DIFF_ARGS - <(git status -sb | sed -e '/^#/d')
    status=$?
    if [[ $status -ne 0 ]]; then
	test_fail "git status does not match expected result"
    fi
}

test_git_work_dir_exists()
{
    local path="$1"
    local git_dir="$path/.git"
    test_dir_exists "$path"
    test_dir_exists "$git_dir"
}   

test_git_work_dir_missing()
{
    local path="$1"
    local git_dir="$path/.git"
    test_dir_missing "$path"
    test_dir_missing "$git_dir"
}

test_git_commit_equals()
{
    local path="$1"
    local expected_commit="$2"
    local actual_commit=$(test_get_git_commit $path/.git)
    if [[ "$expected_commit" != "$actual_commit" ]]; then
	test_fail "Mismatch commit for $path: expected $expected_commit, actual $actual_commit"
    fi
}

test_git_commit_not_equals()
{
    local path="$1"
    local original_commit="$2"
    local actual_commit=$(test_get_git_commit $path/.git)
    if [[ "$original_commit" == "$actual_commit" ]]; then
	test_fail "Original different commits for $path: original $expected_commit, actual $actual_commit"
    fi
}

test_git_branch_equals()
{
    local path="$1"
    local expected_branch="$2"
    local actual_branch=$(test_get_git_branch $path/.git)
    if [[ "$expected_branch" != "$actual_branch" ]]; then
	test_fail "Mismatch branch for $path: expected $expected_branch, actual $actual_branch"
    fi
}

test_title

# All tests run in temporary directory
if [[ -d $TMP_DIR ]]; then
    rm -rf $TMP_DIR
fi
mkdir -p $TMP_WORK
mkdir -p $TMP_REPOS
cd $TMP_WORK
